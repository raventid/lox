#+TITLE: Readme

This is my notes for loxi interpeter. Simple interpreter written in Java. (Please, see repo readme for more details).

** Grammar rules
Expressions:
|------------+--------------------------------------------------------------------------------------|
| Name       | Expr                                                                                 |
|------------+--------------------------------------------------------------------------------------|
| expression | assignment ;                                                                         |
|------------+--------------------------------------------------------------------------------------|
| assignment | IDENTIFIER "=" assignment or equality ;                                              |
|------------+--------------------------------------------------------------------------------------|
| equality   | comparison ( ( "!=" or "==" ) comparison )* ;                                        |
|------------+--------------------------------------------------------------------------------------|
| comparison | term ( ( ">" or ">=" or "<" or "<=" ) term )* ;                                      |
|------------+--------------------------------------------------------------------------------------|
| term       | factor ( ( "-" or "+" ) factor )* ;                                                  |
|------------+--------------------------------------------------------------------------------------|
| factor     | unary ( ( "/" or "*" ) unary )* ;                                                    |
|------------+--------------------------------------------------------------------------------------|
| unary      | ("!" or "-") unary or primary ;                                                      |
|------------+--------------------------------------------------------------------------------------|
| primary    | NUMBER or STRING or "true" or "false" or "nil" or "(" expression ")" or IDENTIFIER ; |
|------------+--------------------------------------------------------------------------------------|

Statements:
|-------------+------------------------------------------|
| program     | statement* EOF ;                         |
|-------------+------------------------------------------|
| block       | "{" declaration "}" ;                    |
|-------------+------------------------------------------|
| declaration | varDecl or statement ;                   |
|-------------+------------------------------------------|
| statement   | exprStmt or printStmt or block ;         |
|-------------+------------------------------------------|
| exprStmt    | expression ";" ;                         |
|-------------+------------------------------------------|
| varDecl     | "var" IDENTIFIER ("=" expression)? ";" ; |
|-------------+------------------------------------------|
| printStmt   | "print" expression ";" ;                 |
|-------------+------------------------------------------|

** Glossary
*** Compilation stages
**** Front end
***** Lexer/Scanner/Lexical analysis
Reads an input, creates ~tokens~
***** Parser
Panicking - state the parser enters after seeing malformed input
Synchronizing parser (synchronization) - run recovery after error happens. simple strategy - use expression statement as synchronization point. i.e. ignore bad expression statement and recover parser from the next one
Parser error is a syntax error
***** AST/Trees/Syntax tree
***** Static analysis and resolution
****** Binding and resolution
For each identifier we find where this name is defined and wire them together
****** Type checking
****** Datastructures used
To store some information related to static analyzis we can use multiple places:
******* Attributes
Attach the info to the correspondent the AST node
******* Symbol table
KV store
******* Tree transformation (rearranging nodes, transposing to the other DS)
**** Middle end
***** Intermediate representation
Helps to solve ~multiple languages x multiple targets~ problem.
Compile every langauge to IR.
Compile IR to target.
***** Optimisation
**** Back end
***** Code generation (code gen)
***** Runtime
Garbage collection, keeping track of the type (if we have "instance of" construction)
*** Operators
infix - between operands
postfix - after an operand
prefix - before an operand

unary - one operand
binary - two operands
ternary - three operands

Can operator have more than 3 operands? We probably can consider pattern matching to be an operator, in this case it accepts dynamic amount of operands
APL language also provides some operators that can consume more than 3 operands.

*** Declaring vs defining
Some languages like C make a distinction between defining a function and declaring a function. Declaration only exist to ensure type checking so it does not require a function body.

*** Function argument vs function parameter
Argument - actual value passed to the function. Function call contains an argument list. (also ~actual parameter~)
Parameter - variable that holds the value of the argument inside the body of the function. Function declaration has a parameter list. (~formal parameters or formals~)

*** Closures
Closures - enclose over variables used in a body. If we return a closure from another function body we should provide a mechanism to capture outside variable and not let it go out of scope.

*** Object-oriented programming
**** Prototype-based
Objects inherit or delegate behaviour to each other. More flexible, more boilerplate and hussle.
**** Class-based
There are object blueprints which we can instantiate

**** Inheritance
Deirved class or subclass vs base class or superclass

*** More on grammar
Regular language - language that grammar can fit into a standard regular expression
Context free grammar - grammar that does not depend on a context (quite obious)

Precedence - determines which operator is evaluated first (physical intuition is higher precedence "bind tighter")
Associativity - determines which operator is evaluated first in a series of the same operator. a = (b = c) - right associative. (5 - 3) - 1 is left associative.

** Compiler vs interpreter
*** Compilation
Translation from one language to the other
*** Interpretation
Execution of the code in a given form (AST, bytecode or other)

Most of the languages are compilers, only small amount are pure interpreters (probably only tree walking interpreter could be considered a pure interpreter)


** General notes about interpreters and some terminology
When we are talking about parser there are two domains. Grammar and Precedence.
Their understand of top/down is reversed. To explain this a bit more.
Imagine you have a construction like var ~a = 10 + 10;~.
Let's use recursive descent (which is top-down parser) parser to built an AST:
       =
     /   \
           +
          / \
        10   10
We will go from lower precedence operator deep down into the higher precedence until we build the full tree with terminals as our leaves.
#+ATTR_HTML: width="400px"
#+ATTR_ORG: :width 400
[[./misc/grammar_and_precedence.png]]


l-value vs r-value
#+begin_src javascript
var a = 10;
a = 20; // a is called l-value, 20 is called r-value (l-value is an assignment place, r-value is expr to eval)
#+end_src

Why use ~var~ declaration and not an implicit declaration like ~a = 10~? It complicates the work with embedded scopes and with growing popularity of functional constructions, lambdas and deep scopes. It is easier to work with explicit decls. Let's elaborate on this a bit, for example:
#+begin_src ruby
a = 10
begin
  a = 20
end
#+end_src
So, in the example above - do we assign 20 to an outside ~a~ or we create a new variable inside a block? There are multiple ways we can reply to this question and different languages approache this problem from a different angle. Javascript creates new variable in a global env for example (brilliant as usual!)

*** Control flow and execution
This is an exaggeration, but we can roughly split control flow into 2 types:
**** Conditional/Branching
Control flow, what piece of code we choose to execute
**** Looping
Should or should not we repeate an execution of some piece of code

** Loxi
*** REPL
I use makefiles to control ~build and execute~ procedure, please use ~make repl~ to run interpreter.

*** Print statement
Print statement was implemented very early in a language, so it could be removed after introducing functions and callable objects. We prefer to keep it to avoid extra work, but it is something to reconsider.
